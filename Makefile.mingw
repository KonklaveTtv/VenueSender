# Makefile for VenueSender project using the MingGW-w64 cross-compiler

# Detect the OS type
UNAME_S := $(shell uname -s)

# Compiler and flags for MinGW-w64
CXX = x86_64-w64-mingw32-g++
CXXFLAGS = -std=c++20 -Wall -Wextra -Isrc/include -Isrc -I/mingw64/include
LDFLAGS = -static-libgcc -static-libstdc++ -L/mingw64/lib
DEBUGFLAGS = -g -O0 -DDEBUG

# Directories
SRCDIR = src
TESTDIR = src/test
OBJDIR = obj
DEBUGOBJDIR = obj/debug
BINDIR = bin
DEBUGBINDIR = bin/debug

# Targets
TARGET = $(BINDIR)/VenueSender.exe
DEBUG_TARGET = $(DEBUGBINDIR)/VenueSenderDebug.exe
TEST_TARGET = $(BINDIR)/VenueSenderTest.exe

# Source files
SRCS = $(wildcard $(SRCDIR)/*.cpp)
TEST_SRCS = $(wildcard $(TESTDIR)/*.cpp)

# Object files
OBJS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(SRCS))
DEBUG_OBJS = $(patsubst $(SRCDIR)/%.cpp, $(DEBUGOBJDIR)/%.o, $(SRCS))
TEST_OBJS = $(patsubst $(TESTDIR)/%.cpp, $(OBJDIR)/%.o, $(TEST_SRCS))
TEST_MAIN_OBJS = $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/test_%.o, $(SRCS))

# Static Libraries for cross-compilation
STATIC_LIBS = -lcurl \
              -lpsl \
              -ljsoncpp \
              -lssl \
              -lcrypto \
              -lz \
              -lsqlite3 \
              -lboost_system-mt \
              -lboost_filesystem-mt \
              -lboost_iostreams-mt \
              -lboost_regex-mt

# Compile rules
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(DEBUGOBJDIR)/%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -c $< -o $@

$(OBJDIR)/test_%.o: $(SRCDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -DUNIT_TESTING -c $< -o $@

$(OBJDIR)/%.o: $(TESTDIR)/%.cpp
	$(CXX) $(CXXFLAGS) -DUNIT_TESTING -c $< -o $@

# Default target
all: directories $(TARGET)

# Debug target
debug: CXXFLAGS += $(DEBUGFLAGS)
debug: directories $(DEBUG_TARGET)

# Test target
test: directories $(TEST_TARGET)

$(TEST_TARGET): $(TEST_OBJS) $(TEST_MAIN_OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $(TEST_OBJS) $(filter-out $(OBJDIR)/test_main.o, $(TEST_MAIN_OBJS)) $(LDFLAGS) $(STATIC_LIBS)

# Create necessary directories
directories:
	mkdir -p $(OBJDIR)
	mkdir -p $(DEBUGOBJDIR)
	mkdir -p $(BINDIR)
	mkdir -p $(DEBUGBINDIR)

# Link the main executable
$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) -o $@ $(OBJS) $(LDFLAGS) $(STATIC_LIBS)

# Link the debug executable
$(DEBUG_TARGET): $(DEBUG_OBJS)
	$(CXX) $(CXXFLAGS) $(DEBUGFLAGS) -o $@ $(DEBUG_OBJS) $(LDFLAGS) $(STATIC_LIBS)

# Clean up
clean:
	rm -rf $(OBJDIR) $(DEBUGOBJDIR) $(BINDIR) $(DEBUGBINDIR)

.PHONY: all directories clean debug test
